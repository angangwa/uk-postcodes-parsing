name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v2.0.1
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to publish (e.g., latest, v2.0.1)'
        required: true
        default: 'latest'
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: anirudhgangwal/uk-postcodes-parsing

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No LFS needed - Dockerfile downloads from GitHub releases

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test multi-platform image
        run: |
          # Test AMD64 image
          docker run --rm --platform linux/amd64 ${{ env.IMAGE_NAME }}:latest python -c "import uk_postcodes_parsing; print('AMD64 OK')"

          # Test ARM64 image (if running on compatible runner)
          if docker run --rm --platform linux/arm64 hello-world >/dev/null 2>&1; then
            docker run --rm --platform linux/arm64 ${{ env.IMAGE_NAME }}:latest python -c "import uk_postcodes_parsing; print('ARM64 OK')"
          else
            echo "ARM64 emulation not available, skipping ARM64 test"
          fi

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./server/README.md